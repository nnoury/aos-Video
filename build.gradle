def keystorePropertiesFile = rootProject.file("keystore.properties");
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
	classpath 'com.github.triplet.gradle:play-publisher:1.2.2'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url 'http://4thline.org/m2'
        }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://jitpack.io' }
        google()
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}
static def getDate() {
    // we increment version number every 1000 seconds,
    // we start on 31/08/2016
    def date = new Date().getTime() / 1000L - 1472637600L
    return (int) (date / 1000L)
}

static def getFormattedDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd.HHmm')
    return formattedDate
}

apply plugin: 'com.android.application'
apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'

play {
    jsonFile = file('nova.json')
    track = 'alpha' // rollout, beta, alpha, release, internal
    userFraction = 0.2 // rollout rate in %/100
}

android {
    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
		storeFile file(keystoreProperties['storeFile'])
		storePassword keystoreProperties['storePassword']
		keyAlias keystoreProperties['keyAlias']
		keyPassword keystoreProperties['keyPassword']
            }
	}
    }
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    useLibrary 'org.apache.http.legacy'
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
    defaultConfig {
        generatedDensities = []
        minSdkVersion 15
        targetSdkVersion 27
        multiDexEnabled true
        versionCode getDate()
        versionName '1.0-' + getFormattedDate()
        if (keystorePropertiesFile.exists()) signingConfig signingConfigs.release
    }
    aaptOptions {
        additionalParameters "--no-version-vectors"
    }
    flavorDimensions "version", "tv", "amazon", "privDeps"
    productFlavors {
        community {
            dimension "version"
            applicationId "org.courville.nova"
        }
        privlibs {
            dimension "privDeps"
        }
        open {
            dimension "privDeps"
        }
        amazon {
            dimension "amazon"
        }
        noamazon {
            dimension "amazon"
        }
        leanback {
            minSdkVersion 17
            dimension "tv"
            versionCode 2
        }
        noleanback {
            dimension "tv"
            versionCode 1
        }
    }
    // make per-variant version code
    applicationVariants.all { variant ->
        // get the version code of each flavor
        def compatVersion = variant.productFlavors.get(1).versionCode
        // set the composite code
        variant.outputs.all { output ->
            output.setVersionCodeOverride(compatVersion * 1000000 + defaultConfig.versionCode)
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project.txt'
        }
    }
    lintOptions {
        disable 'MissingTranslation'
        checkReleaseBuilds false
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/beans.xml'
        exclude 'META-INF/maven'
        exclude 'README'
    }
    if (project.ext.has("ProjectKeyStoreFile")) {
        signingConfigs {
            release {
                storeFile file(ProjectKeyStoreFile)
                storePassword ProjectKeyStorePassword
                keyAlias ProjectKeyAlias
                keyPassword ProjectKeyPassword
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
            debug {
                signingConfig signingConfigs.release
            }
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def api = variant.mergedFlavor.minSdkVersion.apiLevel
            outputFileName = outputFileName.replace("-noleanback-", "-API_" + "${api}" + "+-")
                    .replace("-leanback-", "-API_" + "${api}" + "+-")
                    .replace("-noamazon-", "-")
            assemble.doLast {
                println outputFileName
            }
        }
    }
    variantFilter { variant ->
        if (variant.getFlavors().get(2).name == "amazon"
                && variant.getFlavors().get(0).name != "free" && variant.getFlavors().get(0).name != "ki") {
            variant.setIgnore(true)
        }

        if (variant.getFlavors().get(3).name == "open"
                && variant.getFlavors().get(0).name != "community") {
            variant.setIgnore(true)
        }
        if (variant.getFlavors().get(2).name == "noamazon"
                && variant.getFlavors().get(0).name == "ki") {
            variant.setIgnore(true)
        }
        if (variant.getFlavors().get(1).name == "leanback"
                && (variant.getFlavors().get(0).name == "aw" ||
                variant.getFlavors().get(0).name == "mtk" ||
                variant.getFlavors().get(0).name == "qc" ||
                variant.getFlavors().get(0).name == "rk" ||
                variant.getFlavors().get(0).name == "ti")) {
            variant.setIgnore(true)
        }
    }
}

if (file("../VideoInternal").exists()) {
    apply from: "../VideoInternal/mc_apps_common_env.gradle"
    apply from: '../VideoInternal/internal_build.gradle'
}

dependencies {
    implementation project(':FileCoreLibrary')
    implementation project(':MediaLib')
    implementation 'com.squareup.picasso:picasso:2.71828'

    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support:palette-v7:27.1.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.github.ksoichiro:android-observablescrollview:1.6.0'
    implementation 'com.android.support:design:27.1.1'
    leanbackImplementation 'com.android.support:leanback-v17:27.1.1'

    openImplementation 'com.github.archos-sa:AOS-FakeLibs:517a7ca02f'
}
